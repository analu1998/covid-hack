- Finalize all collections/fields that we want in our database

- Set up signing up functionality
    - Register each sign up to the Firebase Authentication tool.
    - Retrieve a Firebase-authenticated user id token and generate a data point in the Firestore (database)
    - Send email for verifying email (only if user signed up using email/password instead of OAuth)
    - Send back to the client that signing up was successful (give token if necessary)

- Set up authentication middleware
Note: Our server will handle who can access certain data - since all data will pass through the server
before going to the client. Firebase allows for security rules on the Firestore, to limit what data clients can
access if clients connect directly to the Firestore, but this isn't necessary in our case. I will set up security
rules when we're in production and are shipping out our product.
    - Determine which routes require authentication (it will be most of them)
    - Use the authentication token provided in the header of the request to determine which user is making the request
    - Use the user information to determine if they can perform the operation that they are deciding to perform

- Finish post functionality
    - Getting a (paginated) list of posts dependent on certain parameters (date of creation / user id / location data)
    - Getting an individual post by its id
    - Adding a post [Requires Authentication]
    - Editing a post [Requires Authentication]
    - Deleting a post [Requires Authentication]

- Finish user functionality
    - Getting user data [Requires Authentication]
    - Deleting a user [Requires Authentication]
        - Deletes user data but also deletes all their posts
    - Editing user data [Requires Authentication]

- This is all for now - things I'm looking into and will put up tasks for:
    - Location-based data retrieval
    - Searching mechanisms
    - Image/Part storage using Firebase's storage mechanism.
    - Admin setup for adding parts for people to design





